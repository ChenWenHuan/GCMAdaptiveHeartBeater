package com.gcmadaptiveheartbeater.android.BackGroundServices;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.support.v4.content.WakefulBroadcastReceiver;

import com.gcmadaptiveheartbeater.android.Constants;
import com.gcmadaptiveheartbeater.android.Utilities;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Created by mrahman on 24-Oct-16.
 */

public class GCMKAUpdater extends WakefulBroadcastReceiver
{
    @Override
    public void onReceive(Context context, Intent intent) {
        String strAction = intent.getAction();

        if (null == strAction)
            return;

        System.out.println("Action: " + strAction);

        if (strAction.equalsIgnoreCase(Constants.ACTION_SEND_GCM_KA))
        {
            sendGCMKA(context);
        }
        else if (strAction.equalsIgnoreCase(Constants.ACTION_SEND_TEST_KA))
        {
            sendTestKA(context);
        }
        else if (strAction.equalsIgnoreCase(Constants.ACTION_START_KA_TESTING))
        {
            scheduleTestKA(context, -1);
        }

        else if (strAction.equalsIgnoreCase("android.net.conn.CONNECTIVITY_CHANGE")) {
            //
            // This is an event generated by the OS when the connectivity state
            // is changed.
            //
            ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo activeNetwork = cm.getActiveNetworkInfo();

            System.out.print("CONNECTIVITY_CHANGE fired. ");
            if (activeNetwork == null)
                System.out.println("(Not connected.)");
            else if (activeNetwork.isConnectedOrConnecting() && !activeNetwork.isConnected())
                System.out.println("(Connecting...)");
            else if (activeNetwork.isConnected())
                System.out.println("(Connected.");

            //
            // Whenever we get connected, we let the system stabilize for a minute
            // then send the Test/GCM KA as appropriate as per testing model.
            //
            int expModel = Utilities.getExpModel(context);
            if (expModel >= 2) {
                scheduleGCMKA(context, 1);
            }

            if (expModel == 3) {
                scheduleTestKA(context, 1);
            }
        }
    }

    private void sendGCMKA(Context context)
    {
        Intent gTalkHeartBeatIntent = new Intent("com.google.android.intent.action.GTALK_HEARTBEAT");
        Intent mcsHeartBeatIntent = new Intent("com.google.android.intent.action.MCS_HEARTBEAT");

        //
        // We are about to send GCM KA. Update the counter.
        //
        Utilities.incrementSetting(context, Constants.GCM_KA_COUNT);
        Utilities.updateSetting(context, Constants.GCM_KA_TIMESTAMP,
                new SimpleDateFormat("MM/dd/yyyy h:mm:ss a").format(new Date())
        );

        System.out.println("Sending GCM KA.");
        context.sendBroadcast(gTalkHeartBeatIntent);
        context.sendBroadcast(mcsHeartBeatIntent);

        //
        // Schedule the next keep-alive.
        // In model 2, the interval is always 1 minute. (1 used in delayM
        // In model 3, we use last known good KA interval (-1 used in delayM)
        scheduleGCMKA(
            context,
            Utilities.getExpModel(context) == 2 ? 1 : -1
            );
    }

    private void scheduleGCMKA(Context context, int delayM)
    {
        //
        // Schedule GCM KA after delay minutes. If delayM is set to negative, then
        // schedule the KA after last known good KA interval
        //
        if (delayM < 0)
        {
            SharedPreferences pref = context.getSharedPreferences(Constants.SETTINGS_FILE, 0);
            delayM = pref.getInt(Constants.LKG_KA, 1);
        }

        AlarmManager alarm = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);

        //
        // Now we need to update the timer.
        //
        alarm.set(
                AlarmManager.RTC_WAKEUP,
                System.currentTimeMillis() + delayM * 60 * 1000,
                PendingIntent.getBroadcast(context, 0, new Intent(Constants.ACTION_SEND_GCM_KA), PendingIntent.FLAG_UPDATE_CURRENT)
        );
    }

    private void sendTestKA(Context context)
    {
        startWakefulService(context, new Intent(Constants.ACTION_SEND_TEST_KA));
    }

    private void scheduleTestKA(Context context, int delayM)
    {
        //
        // Schedule Test KA connection establishment after delay minutes.
        // If delayM is set to negative, then establish immediately.
        //
        if (delayM < 0)
        {
            startWakefulService(context, new Intent(Constants.ACTION_START_KA_TESTING));
        }
        else
        {
            AlarmManager alarm = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);

            //
            // Now we need to update the timer.
            //
            alarm.set(
                AlarmManager.RTC_WAKEUP,
                System.currentTimeMillis() + delayM * 60 * 1000,
                PendingIntent.getBroadcast(context, 0, new Intent(Constants.ACTION_START_KA_TESTING), PendingIntent.FLAG_UPDATE_CURRENT)
                );
        }
    }

}
